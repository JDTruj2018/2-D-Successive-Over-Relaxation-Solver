Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: sor_iter(cl_args *, params *, grid *, func *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sor_iter(cl_args *, params *, grid *, func *)) [1/1=100.0%] src/soriter.c(33,68)
  -> EXTERN: (39,22) calloc(size_t, size_t)
  -> EXTERN: (41,26) calloc(size_t, size_t)
  -> EXTERN: (111,5) printf(const char *__restrict__, ...)


    Report from: OpenMP optimizations [openmp]

src/soriter.c(76:5-76:5):OMP:sor_iter:  OpenMP multithreaded code generation for BARRIER was successful
src/soriter.c(58:5-58:5):OMP:sor_iter:  OpenMP DEFINED LOOP WAS PARALLELIZED
src/soriter.c(79:5-79:5):OMP:sor_iter:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/soriter.c(40,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at src/soriter.c(45,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/soriter.c(45,3)
   remark #15388: vectorization support: reference res.f has aligned access   [ src/soriter.c(46,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.438
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 4.000 
   remark #15478: estimated potential speedup: 1.470 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/soriter.c(45,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/soriter.c(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/soriter.c(101,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/soriter.c(101,5)
      remark #15388: vectorization support: reference res.f has aligned access   [ src/soriter.c(102,9) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.438
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.470 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at src/soriter.c(101,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at src/soriter.c(106,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between res.f line 107 and res.f line 107
      remark #15346: vector dependence: assumed ANTI dependence between res.f line 107 and res.f line 107
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/soriter.c(106,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/soriter.c(59,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between res.f line 64 and res.f line 67
   remark #15346: vector dependence: assumed FLOW dependence between res.f line 67 and res.f line 64

   LOOP BEGIN at src/soriter.c(60,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at src/soriter.c(80,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between res.f line 85 and res.f line 97
   remark #15346: vector dependence: assumed FLOW dependence between res.f line 97 and res.f line 85

   LOOP BEGIN at src/soriter.c(81,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END
===========================================================================
